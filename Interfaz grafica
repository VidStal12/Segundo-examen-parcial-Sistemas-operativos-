#include <SFML/Graphics.hpp>
#include <thread>
#include <vector>
#include <mutex>
#include <random>
#include <iostream>
#include <chrono>

// Dimensiones de la sala
const int rows = 5, cols = 10;
sf::RectangleShape seats[rows][cols];
std::vector<std::vector<bool>> seatMatrix(rows, std::vector<bool>(cols, false)); // Estado de los asientos
std::mutex mtx;  // Mutex para proteger la estructura de datos

// Función que simula la reservación de un asiento
void reservarAsiento(int thread_id) {
    std::this_thread::sleep_for(std::chrono::milliseconds(rand() % 1000));  // Simula tiempo de espera
    std::lock_guard<std::mutex> lock(mtx);  // Protege el acceso a seatMatrix

    int fila = rand() % rows;
    int columna = rand() % cols;

    if (!seatMatrix[fila][columna]) {  // Si el asiento no está reservado
        seatMatrix[fila][columna] = true;  // Reserva el asiento
        seats[fila][columna].setFillColor(sf::Color::Red);  // Actualiza visualmente
        std::cout << "Hilo " << thread_id << " reservó asiento en fila " << fila << ", columna " << columna << ".\n";
    } else {
        std::cout << "Hilo " << thread_id << " encontró el asiento ya reservado.\n";
    }
}

int main() {
    // Crear la ventana gráfica con SFML
    sf::RenderWindow window(sf::VideoMode(800, 600), "Reserva de Asientos");

    // Inicializar la representación visual de los asientos
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            seats[i][j].setSize(sf::Vector2f(50, 50));
            seats[i][j].setPosition(j * 60 + 50, i * 60 + 50);
            seats[i][j].setFillColor(sf::Color::Green);  // Asiento disponible (verde)
        }
    }

    // Crear varios hilos para simular reservaciones
    std::vector<std::thread> threads;
    for (int i = 0; i < 10; ++i) {
        threads.push_back(std::thread(reservarAsiento, i));  // Cada hilo intentará reservar un asiento
    }

    // Bucle principal de la ventana gráfica
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Refrescar la ventana gráfica y dibujar los asientos
        window.clear();
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                window.draw(seats[i][j]);
            }
        }
        window.display();
    }

    // Esperar a que todos los hilos terminen su trabajo
    for (auto& t : threads) {
        t.join();
    }

    return 0;
}
